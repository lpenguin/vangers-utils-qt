# Borrowed from https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml

name: Build Packages

on:
  push:
    tags:
    - '*'
    branches:
    - 'actions'

env:
  QT_VERSION: 5.15.2
  QTCREATOR_VERSION: 4.14.2
  VANGERS_UTILS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  VANGERS_UTILS_SNAPSHOT: ${{ !startsWith(github.ref, 'refs/tags/v') }}

jobs:
  version:
    name: Determine VangersUtils version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release: ${{ steps.get-version.outputs.release }}

    steps:
    - name: Get version
      id: get-version
      run: |
        if [[ "$VANGERS_UTILS_RELEASE" == 'true' ]]; then echo "::set-output name=version::${GITHUB_REF:11}" ; fi
        if [[ "$VANGERS_UTILS_RELEASE" != 'true' ]]; then echo "::set-output name=version::$(date "+%Y.%m.%d")" ; fi
        echo "::set-output name=release::${VANGERS_UTILS_RELEASE}"
  linux:
    name: Linux (AppImage)
    runs-on: ubuntu-16.04
    needs: version
    if: ${{ false }} 

    env:
      VANGERS_UTILS_VERSION: ${{ needs.version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev libcurl4-openssl-dev

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.8
      with:
        cmake-version: '3.19'

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    
    - name: run CMake
      run: |
        cmake . -DCMAKE_INSTALL_PREFIX=install-root
        make
        make install

    - name: Build AppImage
      run: |
        wget -q -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
        chmod a+x linuxdeployqt
        ./linuxdeployqt ./install-root/usr/share/applications/com.lpenguin.vangers-utils.desktop -bundle-non-qt-libs -verbose=2 -appimage
        mv Vangers_Utils-*-x86_64.AppImage VangersUtils-$VANGERS_UTILS_VERSION-x86_64.AppImage
  
    # - name: Upload VangersUtils-x86_64.AppImage
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: VangersUtils-${{ needs.version.outputs.version }}-x86_64.AppImage
    #     path: VangersUtils-*x86_64.AppImage

    - name: Upload to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: VangersUtils-*x86_64.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # macos:
  #   name: macOS
  #   runs-on: macos-latest
  #   needs: version

  #   env:
  #     TILED_VERSION: ${{ needs.version.outputs.version }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Install Qt
  #     run: |
  #       sudo ./dist/install-qt.sh --version ${QT_VERSION} qtbase qtdeclarative qtscript qtsvg qtimageformats qttools | tee -a $GITHUB_PATH
  #       sudo ./dist/install-qt.sh --version ${QTCREATOR_VERSION} qtcreator | tee -a $GITHUB_PATH
  #   - name: Setup Qbs
  #     run: |
  #       qbs setup-toolchains --detect
  #       qbs config defaultProfile xcode
  #   - name: Build Zstandard
  #     run: |
  #       git clone --depth 1 -b master https://github.com/facebook/zstd.git
  #       pushd zstd/lib
  #       make libzstd.a
  #       popd
  #   - name: Build Tiled
  #     run: |
  #       qbs install --install-root install config:release qbs.installPrefix:"" projects.Tiled.enableZstd:true
  #   - name: Package
  #     run: |
  #       macdeployqt install/Tiled.app -verbose=2
  #       pushd install
  #       ruby ../dist/macos/fixup-install-names.rb
  #       ditto -c -k --sequesterRsrc --keepParent Tiled.app ../Tiled-macos.zip
  #       popd
  #   - name: Upload Tiled.app
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: Tiled-macos.app
  #       path: Tiled-macos.zip

  windows:    
    name: Windows (${{ matrix.arch }}-bit)
    runs-on: windows-latest
    needs: version

    strategy:
      matrix:
        include:
        # - arch: 32
        #   openssl_arch: x86
        - arch: 64
          openssl_arch: x64

    env:
      VANGERS_UTILS_VERSION: ${{ needs.version.outputs.version }}
      QT_TOOLCHAIN: win${{ matrix.arch }}_mingw81
      MINGW_VERSION: 8.1.0
      MINGW_COMPONENT: win${{ matrix.arch }}_mingw810

    defaults:
      run:
        shell: msys2 {0}
        # shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # - name: Install Qt
    #   run: |
    #     # curl "https://code.qt.io/cgit/qbs/qbs.git/plain/scripts/install-qt.sh" --output "./dist/install-qt.sh"
    #     # chmod +x "./dist/install-qt.sh"

    #     echo "QT_PATH=$(./dist/install-qt.sh --version ${QT_VERSION} --toolchain ${QT_TOOLCHAIN} qtbase qtdeclarative qtscript qtsvg qtimageformats qttools qttranslations)" | tee -a  $GITHUB_ENV
    #     echo "MINGW_PATH=$(./dist/install-qt.sh --version ${MINGW_VERSION} ${MINGW_COMPONENT})" | tee -a  $GITHUB_ENV
    #     ./dist/install-qt.sh --version ${QTCREATOR_VERSION} qtcreator | tee -a $GITHUB_PATH
    #     cat $GITHUB_PATH
    #     cat $GITHUB_ENV

    # - name: Setup Qbs
    #   run: |
    #     qbs setup-toolchains ${MINGW_PATH}/*-w64-mingw32-gcc.exe mingw
    #     qbs setup-qt ${QT_PATH}/qmake.exe qt
    #     qbs config defaultProfile qt

    # - name: Build VangersUtils
    #   run: |
    #     qbs build --all-products config:release

    # - name: Setup CMake
    #   uses: jwlawson/actions-setup-cmake@v1.8
    #   with:
    #     cmake-version: '3.19'

    - uses: msys2/setup-msys2@v2
      with:
        # update: true
        path-type: inherit
        install: >-
          base-devel
          cmake
          mingw-w64-x86_64-gcc

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCacheMINGW
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        arch: win64_mingw81
    
    - name: run CMake
#    cmake . -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=install-root
      run: |
        cmake . -G "CodeBlocks - Unix Makefiles" -DCMAKE_INSTALL_PREFIX=install-root
        make VERBOSE=1 
        make install

    - name: Run windeployqt
      run: |
        ${Qt5_Dir}/bin/windeployqt.exe install-root/usr/bin/vangers-utils-qt.exe
        cp /c/ProgramData/chocolatey/bin/libgcc_s*.dll install-root/usr/bin
        cp /c/ProgramData/chocolatey/bin/libstdc++*.dll install-root/usr/bin
        cp /c/ProgramData/chocolatey/bin/libwinpthread*.dll install-root/usr/bin
        
    # - name: Upload VangersUtils archive
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: VangersUtils-${{ needs.version.outputs.version }}-win${{ matrix.arch }}
    #     path: release/install-root/bin/*

    - uses: papeloto/action-zip@v1
      with:
        files: install-root/usr/bin/
        dest: VangersUtils-${{ needs.version.outputs.version }}-win${{ matrix.arch }}.zip

    - name: Upload to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: VangersUtils-${{ needs.version.outputs.version }}-win${{ matrix.arch }}.zip 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

